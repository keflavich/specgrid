import os
import time
from scipy import stats

import json

import numpy as np

from specgrid.fitting import BaseFitResult

try:
    import pymultinest
except:
    multinest_available = False
else:
    multinest_available = True

class MultinestResult():
    pass


class BaseMultinestFitter(object):
    """
    Use multinest to fit a spectrum using a grid of models generated by specgrid.

    Parameters
    ----------


    likelihood: ~Likelihood object, optional
        By default uses the Likelihood object which uses the chi-square for the
        likelihood of observing the data given the model param_names

    run_dir:

    """


    def __init__(self, likelihood, priors, run_dir='chains',
                 prefix='spectrum_fit'):

        self.basename = self.prepare_fit_directory(run_dir, prefix) # prefix of the file names to save
        self.likelihood = likelihood
        self.priors = priors



    @property
    def n_params(self):
        return len(self.likelihood.param_names)

    @property
    def basename_(self):
        return '{0}_'.format(self.basename)

    @property
    def posterior_data(self):
        if self._posterior_data is None:
            self._posterior_data = self.read_posterior_data()

        return self._posterior_data

    def prepare_fit_directory(self, run_dir, prefix):
        if not os.path.exists(run_dir):
            os.mkdir(run_dir)

        # checking if previous chains already exist
        return os.path.join(run_dir, prefix)

    def run(self, **kwargs):

        start_time = time.time()
        pymultinest.run(self.likelihood, self.priors.prior_transform,
                        self.n_params, outputfiles_basename=self.basename_,
                        **kwargs)
#        json.dump(self.parameter_names, open("{0}_{1}".format(self.basename,
#                                                      'params.json'), 'w')) # save parameter names

        print "Fit finished - took {0:.2f} s".format(time.time() - start_time)
        # analyze the output data


    def read_posterior_data(self):
        """
        Reading the posterior data into a pandas dataframe
        :return:
        """
        posterior_data = pd.read_csv('{0}_.txt'.format(self.basename),
                           delim_whitespace=True,
                           names=['posterior', 'x'] + self.parameter_names)
        posterior_data.index = np.arange(len(posterior_data))
        return posterior_data



    def calculate_sigma(self, parameter_name, sigma):

        posterior_data = self.posterior_data.sort(parameter_name)
        parameter_values, posterior_values = (posterior_data[parameter_name],
                                              posterior_data['posterior'])
        posterior_cumsum = posterior_values.cumsum()

        norm_distr = stats.norm(loc=0.0, scale=1.)

        sigma_low = np.interp(norm_distr.cdf(-sigma), posterior_cumsum,
                              parameter_values)

        sigma_high = np.interp(norm_distr.cdf(sigma), posterior_cumsum,
                              parameter_values)


        return sigma_low, sigma_high


    def __repr__(self):
        return "{0}\n\n{1}".format(
            self.likelihood, self.priors)